// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ dotenv –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ BOT_API –∏ MONGO_DB
import 'dotenv/config.js'
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ grammyJS - —Å–∞–º–∞ –±–∏–±–ª–µ–æ—Ç–µ–∫–∞
import { Bot, InlineKeyboard, session, InputMediaBuilder, InputFile } from 'grammy'
// –ü–ª–∞–≥–∏–Ω grammyJS –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
import { hydrate } from '@grammyjs/hydrate'



// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY)
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
bot.use(hydrate())

// –•—Ä–∞–Ω–∏–ª–∏—â–µ
function initial() {
    return { prizes: [] };
  }
bot.use(session({ initial }));

// –°—Ç–∞—Ä—Ç
bot.command('start', async (ctx) => {
    await ctx.react('‚ù§‚Äçüî•')
    const match = ctx.match.split('_');
    
        if (match[0] === "item") {
            const keyb = new InlineKeyboard()
            const m = match[1]
            if (m === 'cats') {
                keyb.text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'open_cats')
            } else if (m === 'chehol') {
                keyb.text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'open_chehol')
            } else if (m === 'disk') {
                keyb.text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'open_disk')
            } else if (m === 'heart') {
                keyb.text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'open_heart')
            } else if (m === 'klukva') {
                keyb.text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'open_klukva')
            } else if (m === 'kofta') {
                keyb.text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'open_kofta')
            } else if (m === 'kinder') {
                keyb.text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'open_kinder')
            }
            await ctx.replyWithPhoto(new InputFile("images/close.png"), {
                reply_markup: keyb,
                parse_mode: 'HTML',
                caption: '<b>–õ—é–±–∏–º–∞—è, –Ω–µ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞ –Ω–µ —Ä–∞—Å–ø–∞–∫—É–µ—à—å</b>\n\nüëáüëáüëá'
            })
        } else {
            await ctx.replyWithPhoto(new InputFile("images/qr.png"), {
                parse_mode: 'HTML',
                caption: '<b>–õ—é–±–æ–≤—å, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π qr —Å –≤–µ—â–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å</b>'
            })
        }
    
    await startButton(ctx)
})




bot.callbackQuery('open_cats', async (ctx) => {
    let isSession = ctx.session.prizes.findIndex((item) => item === "cats");
    if (isSession === -1) {
        ctx.session.prizes.push('cats')
    } else {
        await ctx.reply('—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ üíã')
    }
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/cats.png`), {
            caption: `<b>–ê—Ä—á–∏ –∏ –æ—Å–∏–∫!</b>\n\n–ò—Å–∫–∞–ª —á—Ç–æ –∂–µ –º–Ω–µ –∑–∞–∫–∏–Ω—É—Ç—å –≤ –ø–æ—Å—ã–ª–æ—á–∫—É. –í—Å–ø–æ–º–Ω–∏–ª, —á—Ç–æ —É –Ω–∞—Å —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∫–æ—Ç–∏–∫–∏;) –ù–∞—à–µ–ª –º–∞—Å—Ç–µ—Ä–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è —Å–¥–µ–ª–∞–µ—Ç –º–Ω–µ –∏—Ö (—è –Ω–∏–∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ —É–º–µ–ª, –∞ –Ω–∞—á–∏–Ω–∞—Ç—å –±—ã–ª–æ —É–∂–µ –ø–æ–∑–¥–Ω–æ). –ù–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª–∞—Å—å... –ó–∞–∫–∞–∑–∞–ª 2 –¥–µ–∫–∞–±—Ä—è, –∑–∞–±—Ä–∞–ª —Ç–æ–ª—å–∫–æ 11-–æ–≥–æ... –ù–∞–¥–µ—é—Å—å, —Å—Ç–æ—è—Ç —Ç–æ–≥–æ!)\n\n–°–¥–µ–ª–∞–ª –ø–∞—Ä–Ω—ã–µ, —á—Ç–æ–± –∏ —É —Ç–µ–±—è –±—ã–ª–∏, –∏ —É –º–µ–Ω—è`,
            parse_mode: 'HTML',
        }
    );
    const keyAll = new InlineKeyboard()
    if(ctx.session.prizes.length === 7) {
        keyAll.text('–¢—ã –≤—Å—ë —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∞! –ù–∞–∂–º–∏!', 'open_all')
    } else {
        keyAll.text(`${ctx.session.prizes.length}/7`, 'open_none')
    }
    await ctx.editMessageMedia(newMedia, {
        reply_markup: keyAll
    });
    ctx.answerCallbackQuery()
})


bot.callbackQuery('open_chehol', async (ctx) => {
    let isSession = ctx.session.prizes.findIndex((item) => item === "chehol");
    if (isSession === -1) {
        ctx.session.prizes.push('chehol')
    } else {
        await ctx.reply('—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ üíã')
    }
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/chehol.png`), {
            caption: `<b>–ë—É–∫–≤–∞–ª—å–Ω–æ: –∞ –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç</b>\n\n–Ø –Ω–µ –∑–Ω–∞—é, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–µ—Ö–æ–ª –ø—Ö–ø—Ö–ø—Ö.\n–ü—Ä–æ—Å—Ç–æ –ø–æ–∑–≤–æ–ª—è–π —Å–µ–±–µ –±—ã—Ç—å —Å–æ–±–æ–π.`,
            parse_mode: 'HTML',
        }
    );
    const keyAll = new InlineKeyboard()
    if(ctx.session.prizes.length === 7) {
        keyAll.text('–¢—ã –≤—Å—ë —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∞! –ù–∞–∂–º–∏!', 'open_all')
    } else {
        keyAll.text(`${ctx.session.prizes.length}/7`, 'open_none')
    }
    await ctx.editMessageMedia(newMedia, {
        reply_markup: keyAll
    });
    ctx.answerCallbackQuery()
})

bot.callbackQuery('open_disk', async (ctx) => {
    let isSession = ctx.session.prizes.findIndex((item) => item === "disk");
    if (isSession === -1) {
        ctx.session.prizes.push('disk')
    } else {
        await ctx.reply('—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ üíã')
    }
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/disk.png`), {
            caption: `<b>–ï—â–µ –æ–¥–∏–Ω –¥–∏—Å–∫ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–ª–µ–µ—Ä–∞</b>\n\n–ë—Ä–∞–ª —É –∂–µ–Ω—â–∏–Ω—ã –≤ –¥–æ–º–µ, —Å –¥–≤—É–º—è –æ–≥—Ä–æ–º–Ω—ã–º–∏ —Ä—ã–∂–∏–º–∏ –∫–æ—Ç–∞–º–∏, –∏ —Ç–∞–∫–∏–º –∂–µ —Ä—ã–∂–∏–º –º—É–∂–µ–º —Ö—Ö–≤—Ö–≤—Ö–≤. –≠—Ç–æ—Ç –∞–ª—å–±–æ–º –≥–ª—é–∫–æ–∑—ã, –∑–∏–º–æ–π, –ø–æ–º–æ–∂–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ö–∞–Ω–¥—Ä–æ–π –∏ –≥—Ä—É—Å—Ç—å—é.\n\n<a href="durdusii.ru">–¢–æ—Ç —Å–∞–º—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª, –µ—Å–ª–∏ –∑–∞–±—ã–ª–∞)</a>`,
            parse_mode: 'HTML',
        }
    );
    const keyAll = new InlineKeyboard()
    if(ctx.session.prizes.length === 7) {
        keyAll.text('–¢—ã –≤—Å—ë —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∞! –ù–∞–∂–º–∏!', 'open_all')
    } else {
        keyAll.text(`${ctx.session.prizes.length}/7`, 'open_none')
    }
    await ctx.editMessageMedia(newMedia, {
        reply_markup: keyAll
    });
    ctx.answerCallbackQuery()
})

bot.callbackQuery('open_heart', async (ctx) => {
    let isSession = ctx.session.prizes.findIndex((item) => item === "heart");
    if (isSession === -1) {
        ctx.session.prizes.push('heart')
    } else {
        await ctx.reply('—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ üíã')
    }
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/heart.png`), {
            caption: `<b>–ú–∏–ª–µ–Ω—å–∫–∞—è –ø–∞—Ä–Ω–∞—è –±—Ä–æ—à–∫–∞</b>\n\n–Ø –Ω–∞–¥–µ—é—Å—å, –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å–ø–æ–∫–æ–π–Ω–µ–µ. –ó–Ω–∞–π, —á—Ç–æ –≤—Ç–æ—Ä–∞—è —Ç–∞–∫–∞—è –∂–µ –±—É–¥–µ—Ç –∏ –Ω–∞ –º–Ω–µ.`,
            parse_mode: 'HTML',
        }
    );
    const keyAll = new InlineKeyboard()
    if(ctx.session.prizes.length === 7) {
        keyAll.text('–¢—ã –≤—Å—ë —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∞! –ù–∞–∂–º–∏!', 'open_all')
    } else {
        keyAll.text(`${ctx.session.prizes.length}/7`, 'open_none')
    }
    await ctx.editMessageMedia(newMedia, {
        reply_markup: keyAll
    });
    ctx.answerCallbackQuery()
})

bot.callbackQuery('open_klukva', async (ctx) => {
    let isSession = ctx.session.prizes.findIndex((item) => item === "klukva");
    if (isSession === -1) {
        ctx.session.prizes.push('klukva')
    } else {
        await ctx.reply('—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ üíã')
    }
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/klukva.png`), {
            caption: `<b>–í–∫—É—Å–Ω–µ–π—à–∞—è –∫–ª—é–∫–≤–∞</b>\n\n–ü–æ–º–Ω—é –∫–∞–∫ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª —Ç–µ–±–µ –¥–∞–≤–Ω–µ–Ω—å–∫–æ –æ —Ç–∞–∫–æ–π –≤–∫—É—Å–Ω—è—à–∫–µ. –•–æ–¥–∏–ª, –±—Ä–æ–¥–∏–ª –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É, –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å –≤ —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö "–º–∞—Ç√∂". –°—Ç–æ–∏—Ç –∫–æ–Ω—Å–∫–∏—Ö –¥–µ–Ω–µ–≥. –†–µ—à–∏–ª –ø–æ–¥–µ–ª–∏—Ç—å—Å—è;)\n–ù–∞–¥–µ—é—Å—å, –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ! (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–¥–∞–π –±–∞–±—É—à–∫–µ, –∑–∞—Ü–µ–Ω–∏—Ç)))`,
            parse_mode: 'HTML',
        }
    );
    const keyAll = new InlineKeyboard()
    if(ctx.session.prizes.length === 7) {
        keyAll.text('–¢—ã –≤—Å—ë —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∞! –ù–∞–∂–º–∏!', 'open_all')
    } else {
        keyAll.text(`${ctx.session.prizes.length}/7`, 'open_none')
    }
    await ctx.editMessageMedia(newMedia, {
        reply_markup: keyAll
    });
    ctx.answerCallbackQuery()
})

bot.callbackQuery('open_kofta', async (ctx) => {
    let isSession = ctx.session.prizes.findIndex((item) => item === "kofta");
    if (isSession === -1) {
        ctx.session.prizes.push('kofta')
    } else {
        await ctx.reply('—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ üíã')
    }
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/kofta.png`), {
            caption: `<b>–Ø —Ä—è–¥–æ–º</b>\n\n–≠—Ç–∞ –∫–æ—Ñ—Ç–æ—á–∫–∞ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –±—É–¥–µ—Ç —Ç–µ–±—è –≥—Ä–µ—Ç—å —ç—Ç–æ–π –∑–∏–º–æ–π! –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ.\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–ª–∏—Ç–∞ —Ç–æ–Ω–Ω–æ–π —Å–ª–µ–∑ –∏ —É—Å—ã–ø–∞–Ω–∞ —Ç—ã—Å—è—á–∞–º–∏ –ø–æ—Ü–µ–ª—É–µ–≤`,
            parse_mode: 'HTML',
        }
    );
    const keyAll = new InlineKeyboard()
    if(ctx.session.prizes.length === 7) {
        keyAll.text('–¢—ã –≤—Å—ë —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∞! –ù–∞–∂–º–∏!', 'open_all')
    } else {
        keyAll.text(`${ctx.session.prizes.length}/7`, 'open_none')
    }
    await ctx.editMessageMedia(newMedia, {
        reply_markup: keyAll
    });
    ctx.answerCallbackQuery()
})

bot.callbackQuery('open_kinder', async (ctx) => {
    let isSession = ctx.session.prizes.findIndex((item) => item === "kinder");
    if (isSession === -1) {
        ctx.session.prizes.push('kinder')
    } else {
        await ctx.reply('—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ üíã')
    }
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/kinder.png`), {
            caption: `<b>–ú–ê–ú–ê –ü–û–ü–†–û–°–ò–õ–ê –ê–•–ê–•–•–ê</b>\n\n–ö–æ–≥–¥–∞ –Ω–∞–ø–∏—Å–∞–ª –º–∞–º–µ, —á—Ç–æ —Å–æ–±–∏—Ä–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—ã–ª–æ—á–∫—É —Ç–µ–±–µ, –æ–Ω–∞ –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–±–µ –æ—Ç –Ω–µ–µ –±–æ–ª—å—à—É—é —à–æ–∫–æ–ª–∞–¥–∫—É. –í –æ–±—â–µ–º, –±–æ–ª—å—à–æ–π –Ω–µ –Ω–∞—à–µ–ª, –¥–∞—Ä—é —Ç—Ä–∏ —Ç–∞–∫–∏—Ö;)`,
            parse_mode: 'HTML',
        }
    );
    const keyAll = new InlineKeyboard()
    if(ctx.session.prizes.length === 7) {
        keyAll.text('–¢—ã –≤—Å—ë —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∞! –ù–∞–∂–º–∏!', 'open_all')
    } else {
        keyAll.text(`${ctx.session.prizes.length}/7`, 'open_none')
    }
    await ctx.editMessageMedia(newMedia, {
        reply_markup: keyAll
    });
    ctx.answerCallbackQuery()
})

bot.callbackQuery('open_all', async (ctx) => {
    const newMedia = InputMediaBuilder.photo(
        new InputFile(`images/love.png`), {
            caption: `<b>—è —Ç–µ–±—è –ª—é–±–ª—é</b>\n\n—è –±–µ–∑—É–º–Ω–æ —Å—á–∞—Å–ª–∏–≤ –±—ã—Ç—å —Å —Ç–æ–±–æ–π, –ª–µ—Ä. —Ç—ã –º–æ—è –∑–≤–µ–∑–¥–æ—á–∫–∞, –ª—É—á–∏–∫ —Ç–µ–ø–ª–∞ –¥–ª—è –º–æ–µ–≥–æ —Å–µ—Ä–¥—Ü–∞.\n—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —è –¥—É–º–∞–ª: –∞ —á—Ç–æ –±—ã –±—ã–ª–æ, –µ—Å–ª–∏ —è —Ç–µ–±–µ —Ç–æ–≥–¥–∞ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª...\n–Ω–æ —Ç–≤–æ—è, –ª—é–±–∏–º–∞—è –º–Ω–æ–π, —É–ª—ã–±–∫–∞, –≤—Å–µ–≥–¥–∞ –≤—Å–µ –ø–ª–æ—Ö–∏–µ –º—ã—Å–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç.\n—Ç—ã –ø—Ä–∞–≤–¥–∞ –¥–ª—è –º–µ–Ω—è —Å–∞–º–∞—è –ª—É—á—à–∞—è, –º–Ω–µ –Ω–∏–∫—Ç–æ –Ω–µ –Ω—É–∂–µ–Ω,–∫–ª—è–Ω—É—Å—å\n–∞ –µ—â–µ, –∑–∞–ø–æ–º–Ω–∏, —Ä–∞–¥–∏ —Ç–µ–±—è —è –≥–æ—Ç–æ–≤ –Ω–∞ –≤—Å—ë\n\n—Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π, —Å–ø–∞—Å–∏–±–æ...`,
            parse_mode: 'HTML',
        }
    );
    await ctx.editMessageMedia(newMedia);
})

bot.callbackQuery('open_none', async (ctx) => {
    ctx.answerCallbackQuery(`–û—Ç–∫—Ä—ã—Ç–æ: ${ctx.session.prizes.length}/7`)
})

// –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞
bot.catch((err) => {
    const ctx = err.ctx
    console.log(`Error while handling update ${ctx.update.update_id}`)
    const e = err.error
})

bot.start()