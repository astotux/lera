/**
 * Adds `reply_to_message_id` and `chat_id` to outgoing message payloads if not present.
 *
 * Use this when you want to enable auto-quoting for a single scope.
 *
 * @example
 * ```ts
 * import { Bot } from "grammy";
 * import { addReplyParam } from "jsr:@roz/grammy-autoquote";
 *
 * const bot = new Bot("");
 *
 * bot.command("demo", async (ctx) => {
 *   ctx.api.config.use(addReplyParam(ctx));
 *   // OR:
 *   // ctx.api.config.use(addReplyParam(ctx, { allow_send_without_reply: true }));
 *
 *   ctx.reply("Demo command!"); // This will quote the user's message
 * });
 *
 * bot.start();
 * ```
 *
 * @param ctx - The context object.
 * @param options - Optional configuration options.
 * @returns A transformer function.
 */ export function addReplyParam(ctx, options) {
  const transformer = (prev, method, payload, signal)=>{
    if (// If we're not calling a "send" method
    !method.startsWith("send") || // If we're calling "sendChatAction", which doesn't tak "reply_to_message_id"
    method === "sendChatAction") {
      // Do nothing
      return prev(method, payload, signal);
    }
    return prev(method, {
      ...payload,
      reply_parameters: {
        ...payload.reply_parameters,
        message_id: payload.reply_parameters?.message_id ?? ctx.msg?.message_id,
        chat_id: payload.reply_parameters?.chat_id ?? ctx.chat?.id,
        allow_sending_without_reply: options?.allowSendingWithoutReply
      }
    }, signal);
  };
  return transformer;
}
/**
 * Applies the {@link addReplyParam} middleware to the bot's API configuration.
 *
 * Use this when you want to enable auto-quoting for all scopes.
 *
 * @example
 * ```ts
 *  import { Bot } from "grammy";
 *  import { autoQuote } from "jsr:@roz/grammy-autoquote";
 *
 *  const bot = new Bot("");
 *
 *  bot.use(autoQuote());
 *  // OR:
 *  // bot.use(autoQuote({ allow_send_without_reply: true })
 *
 *  bot.command("demo", async (ctx) => {
 *    ctx.reply("Demo command!"); // This will quote the user's message
 *  });
 *
 *  bot.command("hello", async (ctx) => {
 *    ctx.reply("Hi there :)"); // Also quotes the user's message
 *  });
 *
 *  bot.start();
 * ```
 *
 * @param options - Optional configuration options for autoQuote.
 * @returns A middleware function.
 */ export function autoQuote(options) {
  return async (ctx, next)=>{
    ctx.api.config.use(addReplyParam(ctx, options));
    await next();
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Byb3ovZ3JhbW15LWF1dG9xdW90ZS8yLjAuNC9tb2QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb250ZXh0LCBNaWRkbGV3YXJlLCBUcmFuc2Zvcm1lciB9IGZyb20gXCJucG06Z3JhbW15QDFcIjtcblxuLyoqXG4gKiBBZGRzIGByZXBseV90b19tZXNzYWdlX2lkYCBhbmQgYGNoYXRfaWRgIHRvIG91dGdvaW5nIG1lc3NhZ2VzIGlmIG5vdCBwcmVzZW50LCBmb3JjaW5nIHRoZSBib3QgdG8gcXVvdGUgdGhlIHVzZXIncyBtZXNzYWdlIHdoZW5ldmVyIHBvc3NpYmxlLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBhdXRvUXVvdGUgfSBmcm9tIFwianNyOkByb3ovZ3JhbW15LWF1dG9xdW90ZVwiO1xuICogYGBgXG4gKlxuICogQG1vZHVsZVxuICovXG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIHtAbGluayBhdXRvUXVvdGV9IG1pZGRsZXdhcmVcbiAqL1xuZXhwb3J0IHR5cGUgQXV0b1F1b3RlT3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIE1pcnJvciBmb3IgdGhlIHByb3BlcnR5IGRlc2NyaWJlZCBpbiB0aGUgW2RvY3VtZW50YXRpb24gZm9yIFJlcGx5UGFyYW1ldGVyc10oaHR0cHM6Ly9jb3JlLnRlbGVncmFtLm9yZy9ib3RzL2FwaSNyZXBseXBhcmFtZXRlcnMpXG4gICAqL1xuICBhbGxvd1NlbmRpbmdXaXRob3V0UmVwbHk6IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIEFkZHMgYHJlcGx5X3RvX21lc3NhZ2VfaWRgIGFuZCBgY2hhdF9pZGAgdG8gb3V0Z29pbmcgbWVzc2FnZSBwYXlsb2FkcyBpZiBub3QgcHJlc2VudC5cbiAqXG4gKiBVc2UgdGhpcyB3aGVuIHlvdSB3YW50IHRvIGVuYWJsZSBhdXRvLXF1b3RpbmcgZm9yIGEgc2luZ2xlIHNjb3BlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQm90IH0gZnJvbSBcImdyYW1teVwiO1xuICogaW1wb3J0IHsgYWRkUmVwbHlQYXJhbSB9IGZyb20gXCJqc3I6QHJvei9ncmFtbXktYXV0b3F1b3RlXCI7XG4gKlxuICogY29uc3QgYm90ID0gbmV3IEJvdChcIlwiKTtcbiAqXG4gKiBib3QuY29tbWFuZChcImRlbW9cIiwgYXN5bmMgKGN0eCkgPT4ge1xuICogICBjdHguYXBpLmNvbmZpZy51c2UoYWRkUmVwbHlQYXJhbShjdHgpKTtcbiAqICAgLy8gT1I6XG4gKiAgIC8vIGN0eC5hcGkuY29uZmlnLnVzZShhZGRSZXBseVBhcmFtKGN0eCwgeyBhbGxvd19zZW5kX3dpdGhvdXRfcmVwbHk6IHRydWUgfSkpO1xuICpcbiAqICAgY3R4LnJlcGx5KFwiRGVtbyBjb21tYW5kIVwiKTsgLy8gVGhpcyB3aWxsIHF1b3RlIHRoZSB1c2VyJ3MgbWVzc2FnZVxuICogfSk7XG4gKlxuICogYm90LnN0YXJ0KCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY3R4IC0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBBIHRyYW5zZm9ybWVyIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkUmVwbHlQYXJhbTxDIGV4dGVuZHMgQ29udGV4dD4oXG4gIGN0eDogQyxcbiAgb3B0aW9ucz86IFBhcnRpYWw8QXV0b1F1b3RlT3B0aW9ucz4sXG4pOiBUcmFuc2Zvcm1lciB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyOiBUcmFuc2Zvcm1lciA9IChwcmV2LCBtZXRob2QsIHBheWxvYWQsIHNpZ25hbCkgPT4ge1xuICAgIGlmIChcbiAgICAgIC8vIElmIHdlJ3JlIG5vdCBjYWxsaW5nIGEgXCJzZW5kXCIgbWV0aG9kXG4gICAgICAhbWV0aG9kLnN0YXJ0c1dpdGgoXCJzZW5kXCIpIHx8XG4gICAgICAvLyBJZiB3ZSdyZSBjYWxsaW5nIFwic2VuZENoYXRBY3Rpb25cIiwgd2hpY2ggZG9lc24ndCB0YWsgXCJyZXBseV90b19tZXNzYWdlX2lkXCJcbiAgICAgIG1ldGhvZCA9PT0gXCJzZW5kQ2hhdEFjdGlvblwiXG4gICAgKSB7XG4gICAgICAvLyBEbyBub3RoaW5nXG4gICAgICByZXR1cm4gcHJldihtZXRob2QsIHBheWxvYWQsIHNpZ25hbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXYoXG4gICAgICBtZXRob2QsXG4gICAgICB7XG4gICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgIHJlcGx5X3BhcmFtZXRlcnM6IHtcbiAgICAgICAgICAuLi4ocGF5bG9hZCBhcyBhbnkpLnJlcGx5X3BhcmFtZXRlcnMsXG4gICAgICAgICAgbWVzc2FnZV9pZDogKHBheWxvYWQgYXMgYW55KS5yZXBseV9wYXJhbWV0ZXJzPy5tZXNzYWdlX2lkID8/XG4gICAgICAgICAgICBjdHgubXNnPy5tZXNzYWdlX2lkLFxuICAgICAgICAgIGNoYXRfaWQ6IChwYXlsb2FkIGFzIGFueSkucmVwbHlfcGFyYW1ldGVycz8uY2hhdF9pZCA/PyBjdHguY2hhdD8uaWQsXG4gICAgICAgICAgYWxsb3dfc2VuZGluZ193aXRob3V0X3JlcGx5OiBvcHRpb25zPy5hbGxvd1NlbmRpbmdXaXRob3V0UmVwbHksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc2lnbmFsLFxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIHRyYW5zZm9ybWVyO1xufVxuXG4vKipcbiAqIEFwcGxpZXMgdGhlIHtAbGluayBhZGRSZXBseVBhcmFtfSBtaWRkbGV3YXJlIHRvIHRoZSBib3QncyBBUEkgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBVc2UgdGhpcyB3aGVuIHlvdSB3YW50IHRvIGVuYWJsZSBhdXRvLXF1b3RpbmcgZm9yIGFsbCBzY29wZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiAgaW1wb3J0IHsgQm90IH0gZnJvbSBcImdyYW1teVwiO1xuICogIGltcG9ydCB7IGF1dG9RdW90ZSB9IGZyb20gXCJqc3I6QHJvei9ncmFtbXktYXV0b3F1b3RlXCI7XG4gKlxuICogIGNvbnN0IGJvdCA9IG5ldyBCb3QoXCJcIik7XG4gKlxuICogIGJvdC51c2UoYXV0b1F1b3RlKCkpO1xuICogIC8vIE9SOlxuICogIC8vIGJvdC51c2UoYXV0b1F1b3RlKHsgYWxsb3dfc2VuZF93aXRob3V0X3JlcGx5OiB0cnVlIH0pXG4gKlxuICogIGJvdC5jb21tYW5kKFwiZGVtb1wiLCBhc3luYyAoY3R4KSA9PiB7XG4gKiAgICBjdHgucmVwbHkoXCJEZW1vIGNvbW1hbmQhXCIpOyAvLyBUaGlzIHdpbGwgcXVvdGUgdGhlIHVzZXIncyBtZXNzYWdlXG4gKiAgfSk7XG4gKlxuICogIGJvdC5jb21tYW5kKFwiaGVsbG9cIiwgYXN5bmMgKGN0eCkgPT4ge1xuICogICAgY3R4LnJlcGx5KFwiSGkgdGhlcmUgOilcIik7IC8vIEFsc28gcXVvdGVzIHRoZSB1c2VyJ3MgbWVzc2FnZVxuICogIH0pO1xuICpcbiAqICBib3Quc3RhcnQoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBhdXRvUXVvdGUuXG4gKiBAcmV0dXJucyBBIG1pZGRsZXdhcmUgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdXRvUXVvdGUob3B0aW9ucz86IFBhcnRpYWw8QXV0b1F1b3RlT3B0aW9ucz4pOiBNaWRkbGV3YXJlIHtcbiAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICBjdHguYXBpLmNvbmZpZy51c2UoYWRkUmVwbHlQYXJhbShjdHgsIG9wdGlvbnMpKTtcbiAgICBhd2FpdCBuZXh0KCk7XG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTBCQyxHQUNELE9BQU8sU0FBUyxjQUNkLEdBQU0sRUFDTixPQUFtQztFQUVuQyxNQUFNLGNBQTJCLENBQUMsTUFBTSxRQUFRLFNBQVM7SUFDdkQsSUFDRSx1Q0FBdUM7SUFDdkMsQ0FBQyxPQUFPLFVBQVUsQ0FBQyxXQUNuQiw2RUFBNkU7SUFDN0UsV0FBVyxrQkFDWDtNQUNBLGFBQWE7TUFDYixPQUFPLEtBQUssUUFBUSxTQUFTO0lBQy9CO0lBRUEsT0FBTyxLQUNMLFFBQ0E7TUFDRSxHQUFHLE9BQU87TUFDVixrQkFBa0I7UUFDaEIsR0FBRyxBQUFDLFFBQWdCLGdCQUFnQjtRQUNwQyxZQUFZLEFBQUMsUUFBZ0IsZ0JBQWdCLEVBQUUsY0FDN0MsSUFBSSxHQUFHLEVBQUU7UUFDWCxTQUFTLEFBQUMsUUFBZ0IsZ0JBQWdCLEVBQUUsV0FBVyxJQUFJLElBQUksRUFBRTtRQUNqRSw2QkFBNkIsU0FBUztNQUN4QztJQUNGLEdBQ0E7RUFFSjtFQUVBLE9BQU87QUFDVDtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTZCQyxHQUNELE9BQU8sU0FBUyxVQUFVLE9BQW1DO0VBQzNELE9BQU8sT0FBTyxLQUFLO0lBQ2pCLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxLQUFLO0lBQ3RDLE1BQU07RUFDUjtBQUNGIn0=